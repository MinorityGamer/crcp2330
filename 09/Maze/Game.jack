/**Starts up Game that moves a ball around a maze */
//maze form from http://www.ratbehavior.org/RatsAndMazes.htm
class Game {
   field Ball ball; // the square of this game
   field int direction; // the square's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right
   field Wall w1;     //upper wall
   field Wall w2;     //lower wall
   field Wall w3;    //left wall
   field Wall w4;    //right wall 
  //add  minor walls  
   field Wall minW1; 
   field Wall minW2; 
   field Wall minW3; 
   field Wall minW4; 
   field Wall minW5; 
   field Wall minW6; 
   field Wall minW7; 
   field Wall minW8; 


   /** new Game */
   constructor Game new() {
      let ball = Ball.new(15, 220, 2);
      let w1 = Wall.new(0,0,500,5); 
      let w2 = Wall.new(0,245,500,250);
      let w3 = Wall.new(0,0,5,250); 
      let w4 = Wall.new(500,0,505,255);
      let minW1 = Wall.new(0,50,200,55); 
      let minW2 = Wall.new(50,100,55,250);
      let minW3 = Wall.new(50,100,200,105);
      let minW4 = Wall.new(200,100,205,200);
      let minW5 = Wall.new(150,150,155,250);
      let minW6 = Wall.new(400,195,500,200);
      let minW7 = Wall.new(300,0,305,200);
      let minW8 = Wall.new(400,50,405,200);
     

      let direction = 0;  // initial state is no movement
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do ball.dispose();
      do w1.dispose();
      do w2.dispose();  
      do w3.dispose(); 
      do w4.dispose(); 
      do minW1.dispose(); 
      do minW2.dispose(); 
      do minW3.dispose(); 
      do minW4.dispose(); 
      do minW5.dispose(); 
      do minW6.dispose(); 
      do minW7.dispose(); 
      do minW8.dispose(); 
       
      do Memory.deAlloc(this);
      return;
   }
  
   /** Moves ball. */
   method void moveBall() {
      if (direction = 1) { do ball.moveUp(); }
      if (direction = 2) { do ball.moveDown(); }
      if (direction = 3) { do ball.moveLeft(); }
      if (direction = 4) { do ball.moveRight(); }
      do Sys.wait(5);  // delays the next movement
      return;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      var int ballX; 
      var int ballY; 
     
      let exit = false;

     
      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do moveBall();
         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         let ballX = ball.getX(); 
         let ballY = ball.getY(); 
       

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveBall();
         }
      
         if(ballX > 439){
            if(ballX < 459){
               if(ballY > 149){ 
                  if(ballY < 159){   
                     do Output.printString("FINISHED!");
                     return; 
                  }
               }
            }
         }
        
         
     } // while
     return;
   }
}







